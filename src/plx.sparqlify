Prefix spy:<http://aksw.org/sparqlify/>
Prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
Prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>
Prefix foaf:<http://xmlns.com/foaf/0.1/>
Prefix dc:<http://purl.org/dc/elements/1.1/>
Prefix xsd:<http://www.w3.org/2001/XMLSchema#>
Prefix plx:<http://panlex.org/plx/#>
Prefix owl:<http://www.w3.org/2002/07/owl#>


// (ap)
// mappings concerning approvers beeing sources of tranlations stored in
// the ap table
Create View ap As
    Construct {
        ?appr a plx:Approver.
        ?appr plx:registrationDate ?rgdt.
        ?appr plx:label ?labl.
        ?appr plx:uri ?uri.
        ?appr plx:isbn ?isbn.
        ?appr plx:author ?auth.
        ?appr plx:title ?titl.
        ?appr plx:publisher ?publ.
        ?appr plx:yearOfPublication ?year.
        ?appr plx:quality ?qual.
    }
    With
        ?appr = uri(concat(plx:approver, '/', ?ap))
        ?rgdt = typedLiteral(?dt, xsd:date)
        ?labl = plainLiteral(?tt)
        ?uri  = uri(?ur)
        ?isbn = plainLiteral(?bn)
        ?auth = typedLiteral(?au, xsd:string)
        ?titl = typedLiteral(?ti, xsd:string)
        ?publ = plainLiteral(?pb)
        ?year = typedLiteral(?yr, xsd:integer)
        ?qual = typedLiteral(?uq, xsd:integer)
    From
        ap

// (ex)
// mappings concerning expressions stored in the ex table
Create View ex As
    Construct {
        ?expr a plx:Expression.
        ?expr plx:variety ?lvar.
        ?expr plx:text ?etxt.
        ?expr plx:degradedText ?dtxt.
    }
    With
        ?expr = uri(concat(plx:expression, '/', ?ex))
        ?lvar = uri(concat(plx:languageVariety, '/', ?lv))
        ?etxt = typedLiteral(?tt, 'xsd:string')
        ?dtxt = typedLiteral(?td, 'xsd:string')
    From
        ex

// (lv)
// mappings concerning language varieties stored in the lv table
Create View lv AS
    Construct {
        ?lvar a plx:LanguageVariety.
        ?lvar plx:belongsToLanguage ?lang.
        ?lvar plx:varietyName ?name
    }
    With
        ?lvar = uri(concat(plx:languageVariety, '/', ?lv))
        ?lang = uri(concat(plx:language, '/', ?lc))
        ?name = plainLiteral(?tt)
    From
        lv
// *************************************************************************
// // (df)
// // mappings concerning meaning definitions
// Create View df As
//     Construct {
//         ?mn a plx:Meaning.
//         ?mt a plx:MeaningText.
//         ?mn plx:meaningText ?mt.
//         ?mt plx:meaningTextVariety ?lv.
//         ?mt plx:definitionText ?tt.
//     }
//     With
//         ?mn = uri(concat(plx:meaning,'/',?mn))
//         ?mt = uri(concat(plx:meaningText,'/',?df))
//         ?lv = uri(concat(plx:variety,'/',?lv))
//         ?tt = typedLiteral(?tt, xsd:string)
//     From
//         df
// 
// // (dn)
// // mappings concerning denotations
// Create View dn As
//     Construct {
//         ?dn a plx:Denotation.
//         ?dn plx:denotationExpression ?ex.
//         ?dn plx:denotationMeaning ?mn.
//     }
//     With
//         ?dn = uri(concat(plx:Denotation, '/', ?dn)
//         ?ex = uri(concat(plx:expression,'/',?ex))
//         ?mn = uri(concat(plx:meaning,'/',?mn))
//     From
//         dn
// 
// // (i1)
// // ISO 639-3 language name links to lexvo.org
// Create View i1 As
//     Construct {
//         ?iso1 a plx:iso639-1.
//         ?iso1 owl:sameAs ?lexvo1.
//         ?iso3 owl:sameAs ?lexvo3.
//     }
//     With
//         ?iso1 = uri(concat(plx:iso639-1,'/',?iso1))
//         ?iso3 = uri(concat(plx:iso639-3,'/',?iso3))
//         ?lexvo1 = uri(concat('http://lexvo.org/id/iso639-1/',?iso1))
//         ?lexvo3 = uri(concat('http://lexvo.org/id/iso639-3/',?iso3))
//     From
//         i1
// 
// // (lc)
// // mappings concerning language codes
// Create View lc As
//     Construct {
//         ?lc a plx:langCode.
//         ?lc plx:hasLangCodeType ?tp.
//     }
//     With
//         ?lc = uri(concat(plx:langCode,'/',?lc))
//         ?tp = typedLiteral(?tp, xsd:string)
//     From
//         lc
// 
